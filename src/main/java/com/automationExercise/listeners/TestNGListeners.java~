package com.automationExercise.listeners;

import com.automationExercise.FilesUtils;
import com.automationExercise.drivers.UiTest;
import com.automationExercise.drivers.WebDriverProvider;
import com.automationExercise.media.ScreenRecordManager;
import com.automationExercise.media.ScreenshotsManager;
import com.automationExercise.utils.dataReader.PropertyReader;
import com.automationExercise.utils.logs.LogsManager;
import com.automationExercise.utils.reports.AllureAttachmentManager;
import com.automationExercise.utils.reports.AllureConstants;
import com.automationExercise.utils.reports.AllureEnvironmentManager;
import com.automationExercise.utils.reports.AllureReportGenerator;
import com.automationExercise.validations.Validation;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.WebDriver;
import org.testng.*;

import java.io.File;
import java.io.IOException;

public class TestNGListeners implements ISuiteListener, IExecutionListener, IInvokedMethodListener, ITestListener {
    /*public void onStart(ISuite suite) {
        suite.getXmlSuite().setName("Automation Exercise");
    }*/
    public void onExecutionStart() {
        LogsManager.info("Test Execution started");
        try {
            cleanTestOutputDirectories();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        LogsManager.info("Directories cleaned");
        createTestOutputDirectories();
        LogsManager.info("Directories created");
        PropertyReader.loadProperties();
        LogsManager.info("Properties loaded");
        AllureEnvironmentManager.setEnvironmentVariables();
        LogsManager.info("Allure environment set");
    }

    public void onExecutionFinish() {
        AllureReportGenerator.generateReports(false);
        AllureReportGenerator.copyHistory();
        AllureReportGenerator.generateReports(true);
        AllureReportGenerator.openReport(AllureReportGenerator.renameReport());
        LogsManager.info("Test Execution Finished");
    }


    public void beforeInvocation(IInvokedMethod method, ITestResult testResult) {
        if (method.isTestMethod()) {
            if (testResult.getInstance()instanceof UiTest)
            {
                ScreenRecordManager.startRecording();
            }

            {
                ;
                LogsManager.info("Test Case " + testResult.getName() + " started");
            }

        }
    }

    public void afterInvocation(IInvokedMethod method, ITestResult testResult) {
        WebDriver driver = null;
        if (method.isTestMethod()) {

            {
                if (testResult.getInstance()instanceof UiTest)
                {
                    ScreenRecordManager.stopRecording(testResult.getName());
                    if (testResult.getInstance() instanceof WebDriverProvider provider) {
                        driver = provider.getWebDriver();
                    }
                    switch (testResult.getStatus()) {
                        case ITestResult.SUCCESS ->
                                ScreenshotsManager.takeFullPageScreenshot(driver, "passed-" + testResult.getName());
                        case ITestResult.FAILURE ->
                                ScreenshotsManager.takeFullPageScreenshot(driver, "failed-" + testResult.getName());
                        case ITestResult.SKIP ->
                                ScreenshotsManager.takeFullPageScreenshot(driver, "skipped-" + testResult.getName());
                    }
                    AllureAttachmentManager.attachRecords(testResult.getName());
                }
                Validation.assertAll(testResult);

                AllureAttachmentManager.attachLogs();

            }


        }
    }


    public void onTestSuccess(ITestResult result) {
        LogsManager.info("Test Case " + result.getName() + " passed");
    }

    public void onTestFailure(ITestResult result) {
        LogsManager.info("Test Case " + result.getName() + " failed");
    }

    public void onTestSkipped(ITestResult result) {
        LogsManager.info("Test Case " + result.getName() + " skipped");
    }


    // cleaning and creating dirs (logs, screenshots, recordings,allure-results)
    private void cleanTestOutputDirectories() throws IOException {
        // Implement logic to clean test output directories
        // clean allure results but keep history
        File resultsDir = AllureConstants.RESULTS_FOLDER.toFile();
        if (resultsDir.exists()) {
            for (File file : resultsDir.listFiles()) {
                if (!file.getName().equals("history")) {
                    FileUtils.deleteQuietly(file);
                }
            }
        }
        FilesUtils.cleanDirectory(new File(ScreenshotsManager.SCREENSHOTS_PATH));
        FilesUtils.cleanDirectory(new File(ScreenRecordManager.RECORDINGS_PATH));
        FilesUtils.cleanDirectory(new File(LogsManager.LOGS_PATH));
      //  FileUtils.cleanDirectory(new File("src/test/resources/downloads/"));
        FilesUtils.forceDelete(new File(LogsManager.LOGS_PATH +File.separator + "logs.log"));
    }

    private void createTestOutputDirectories() {
        // Implement logic to create test output directories
        FilesUtils.createDirectory(ScreenshotsManager.SCREENSHOTS_PATH);
        FilesUtils.createDirectory(ScreenRecordManager.RECORDINGS_PATH);
        //FilesUtils.createDirectory("src/test/resources/downloads/");

    }

}
